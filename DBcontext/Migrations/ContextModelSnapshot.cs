// <auto-generated />
using System;
using DBcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBcontext.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("repositories.entities.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSucceeded")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActionId");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("repositories.entities.ActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionTypeId"));

                    b.Property<string>("ActionTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionTypeId");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("repositories.entities.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<string>("PremissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("repositories.entities.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"));

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("ResultFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("ActionId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("repositories.entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumFreeTries")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("PermissionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("repositories.entities.Action", b =>
                {
                    b.HasOne("repositories.entities.ActionType", "ActionType")
                        .WithMany("Actions")
                        .HasForeignKey("ActionTypeId");

                    b.HasOne("repositories.entities.User", "User")
                        .WithMany("Actions")
                        .HasForeignKey("UserId");

                    b.Navigation("ActionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("repositories.entities.Picture", b =>
                {
                    b.HasOne("repositories.entities.Action", "Action")
                        .WithMany("Pictures")
                        .HasForeignKey("ActionId");

                    b.Navigation("Action");
                });

            modelBuilder.Entity("repositories.entities.User", b =>
                {
                    b.HasOne("repositories.entities.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("repositories.entities.Action", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("repositories.entities.ActionType", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("repositories.entities.Permission", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("repositories.entities.User", b =>
                {
                    b.Navigation("Actions");
                });
#pragma warning restore 612, 618
        }
    }
}
